# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022 Dell Inc, or its subsidiaries.
---

- name:
  hosts: all
  gather_facts: false
  tasks:
    - name: Sync all clocks
      ansible.builtin.shell: "date -s '{{ now() }}'"


    # TODO: consider flushing OS image (we use ubuntu currently) on the Host x86 servers, since we do it manually will now


- name: Intel MEV | Enable Proxy and Port Forwarding
  hosts: mevbmc
  become: yes
  gather_facts: false
  tasks:
    - ansible.builtin.package: name=socat,squid state=present
    - ansible.builtin.copy: src=../hardware/dh4/fs/etc/systemd/system/socat-otel.service dest=/etc/systemd/system/socat-otel.service
    - ansible.builtin.service: name=socat-otel enabled=yes state=started daemon_reload=yes
    - ansible.builtin.shell: sed -i 's/http_access deny all/http_access allow all/g' /etc/squid/squid.conf
    - ansible.builtin.service: name=squid enabled=yes state=started

- name: Install docker and other packages
  hosts: hostservers,tgens,DPUs,Management
  become: yes
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - ansible.builtin.package: state=present name=python3-pip,sshpass,git
    - when: ansible_os_family == 'Debian'
      block:
        - ansible.builtin.get_url: url=https://download.docker.com/linux/ubuntu/gpg dest=/etc/apt/keyrings/docker.asc mode='0644' force=true
        - ansible.builtin.shell: dpkg --print-architecture
          register: deb_architecture
        - ansible.builtin.apt_repository: state=present repo="deb [arch={{ deb_architecture.stdout}} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    - ansible.builtin.package: state=absent  name=docker.io,docker-doc,docker-compose,docker-compose-v2,podman-docker,containerd,runc
    - ansible.builtin.package: state=present name=docker-ce,docker-ce-cli,containerd.io,docker-buildx-plugin,docker-compose-plugin
    - ansible.builtin.systemd: state=started name=docker

- name:
  hosts: Management
  become: yes
  tasks:
    - name: Run Monitoring OTEL, Prometheus, Grafana
      community.docker.docker_compose_v2:
        project_src: /root/opi-poc/lab
      register: output

- name: Intel | Upgrade Intel Mev IMC and ACC FWs
  hosts: mev
  become: yes
  vars:
      imc_version: 1.4.0.8469
      imc_local_file: /root/intel-ipu-pldm-image-{{ imc_version }}.tar.gz
      imc_remote_file: /work/intel-ipu-pldm-image-{{ imc_version }}/intel-ipu-pldm-{{ imc_version }}.bin
      acc_version: "{{ imc_version }}"
      acc_local_file: /root/intel-ipu-acc-eval-image-{{ acc_version }}.tar.gz
      acc_remote_file: /work/intel-ipu-acc-eval-image-{{ acc_version }}/ACC/OS/acc-os-kernel.bin
      ansible_remote_tmp: /tmp
  tasks:

    - name: Fetch Intel Mev ACC running version
      block:
        - ansible.builtin.shell: cat /etc/issue
        - ansible.builtin.shell: cat /etc/issue.net
          register: result
        - ansible.builtin.set_fact: acc_run_version={{ result.stdout | trim }}
        - ansible.builtin.debug: var=acc_run_version
        - ansible.builtin.fail: msg="Could not find ACC string in the running {{ acc_run_version }}"
          when: not '"ACC" in acc_run_version'

    - name: Fetch Intel Mev IMC running version
      delegate_to: mevbmc
      block:
        - ansible.builtin.shell: cat /etc/issue
        - ansible.builtin.shell: cat /etc/issue.net
          register: result
        - ansible.builtin.set_fact: imc_run_version={{ result.stdout | trim }}
        - ansible.builtin.debug: var=imc_run_version
        - ansible.builtin.shell: /usr/bin/ipu-update -i
        - ansible.builtin.fail: msg="Could not find IMC string in the running {{ imc_run_version }}"
          when: not '"IMC" in imc_run_version'

    - name: Upgrade Intel Mev IMC FW to {{ imc_version }}
      when: not imc_version in imc_run_version
      delegate_to: mevbmc
      block:
        - name: Check if firmware image exists remotely {{ imc_remote_file }}
          ansible.builtin.stat: path={{ imc_remote_file }}
          register: imc_remote_file_check

        # FW file doesn't exist, copy and unpack it

        - name: Copy and Extract {{ imc_local_file }} into remote /work folder
          when: not imc_remote_file_check.stat.exists
          block:
            - name: Check if firmware image exists locally {{ imc_local_file }}
              delegate_to: localhost
              ansible.builtin.stat: path={{ imc_local_file }}
              register: imc_local_file_check

            - name: Copy and Unpack {{ imc_local_file }} into remote /work folder
              when: imc_local_file_check.stat.exists
              ansible.builtin.unarchive: src={{ imc_local_file }} dest=/work

            - name: Check again if firmware image exists remotely {{ imc_remote_file }} after copy and unpack
              ansible.builtin.stat: path={{ imc_remote_file }}
              register: imc_remote_file_check

        # FW file exists, use it to start upgrade

        - name: Start upgrade Intel Mev IMC FW using existing {{ imc_remote_file }}
          when: imc_remote_file_check.stat.exists
          block:
            - ansible.builtin.shell: /usr/bin/ipu-update -i {{ imc_remote_file }}
            # TODO: remove echo below
            - ansible.builtin.shell: echo /usr/bin/ipu-update -u {{  imc_remote_file }}
            - ansible.builtin.shell: echo reboot

    # TODO: now update ACC using /usr/bin/imc-scripts/acc_os_partition_provision.sh

    - name: Upgrade Intel Mev ACC FW to {{ acc_version }}
      when: not acc_version in acc_run_version
      delegate_to: mevbmc
      block:
        - name: Check if firmware image exists remotely {{ acc_remote_file }}
          ansible.builtin.stat: path={{ acc_remote_file }}
          register: acc_remote_file_check

        # FW file doesn't exist, copy and unpack it

        - name: Copy and Extract {{ acc_local_file }} into remote /work folder
          when: not acc_remote_file_check.stat.exists
          block:
            - name: Check if firmware image exists locally {{ acc_local_file }}
              delegate_to: localhost
              ansible.builtin.stat: path={{ acc_local_file }}
              register: acc_local_file_check

            - name: Copy and Unpack {{ acc_local_file }} into remote /work folder
              when: acc_local_file_check.stat.exists
              ansible.builtin.unarchive: src={{ acc_local_file }} dest=/work

            - name: Check again if firmware image exists remotely {{ acc_remote_file }} after copy and unpack
              ansible.builtin.stat: path={{ acc_remote_file }}
              register: acc_remote_file_check

        # FW file exists, use it to start upgrade

        - name: Start upgrade Intel Mev ACC FW using existing {{ acc_remote_file }}
          when: acc_remote_file_check.stat.exists
          block:
            # TODO: remove echo below
            - ansible.builtin.shell: ls /usr/bin/imc-scripts/acc_os_partition_provision.sh {{ acc_remote_file }}

- name:
  hosts: bf2
  become: yes
  vars:
      bfb_local_file: /root/bf-bundle-2.7.0-33_24.04_ubuntu-22.04_prod.bfb
      bfb_url: https://content.mellanox.com/BlueField/BFBs/Ubuntu22.04/{{ bfb_local_file | basename }}
  tasks:
    - name: Nvidia | Fetch BlueField runnikng version
      block:
        - ansible.builtin.shell: cat /etc/mlnx-release
          register: result
        - ansible.builtin.set_fact: bf_version={{ result.stdout | trim }}
        - ansible.builtin.debug: var=bf_version

    - name: Nvidia | Update BlueField using BFB image from the Host
      delegate_to: dh2
      block:
        - ansible.builtin.shell: lspci | grep BlueField
        # TODO: for f in $( dpkg --list | grep doca | awk '{print $2}' ); do echo $f ; apt remove --purge $f -y ; done
        # TODO: sudo apt-get autoremove
        # TODO: wget https://developer.nvidia.com/networking/secure/doca-sdk/doca_2.7/doca-host_2.7.0-204000-24.04-ubuntu2404_amd64.deb
        # TODO: sudo dpkg -i doca-host-repo-ubuntu<version>_amd64.deb
        # TODO: sudo apt-get update
        # TODO: sudo apt install -y doca-runtime doca-sdk
        - ansible.builtin.service: name=rshim enabled=yes state=started
        - ansible.builtin.shell: cat /dev/rshim0/misc
        - ansible.builtin.shell: ifconfig tmfifo_net0 192.168.100.1/30 up

        - name: Check if firmware image exists locally {{ bfb_local_file }}
          ansible.builtin.stat: path={{ bfb_local_file }}
          register: bfb_local_file_check

        - name: Download firmware image {{ bfb_url }}
          ansible.builtin.get_url: url={{ bfb_url }} dest={{ bfb_local_file }} mode='0440'
          when: not bfb_local_file_check.stat.exists

        # TODO: handle ubuntu bfb cfg password

        # TODO: ansible.builtin.shell: "bfb-install --bfb {{ local_bfb }} --config /tmp/bf.cfg --rshim {{ rshim.dev }}"

        - name: Flush BFB image and reboot BF card
          ansible.builtin.shell: cat {{ bfb_local_file }} > /dev/rshim0/boot
          when: not hostvars.bf2.bf_version in bfb_local_file

# from https://www.kernel.org/doc/html/v5.8/networking/device_drivers/pensando/ionic.html
- name: Pensando DSC installation-update
  hosts: dh1
  become: yes
  tasks:
    - ansible.builtin.shell: lspci -d 1dd8:1002
    - ansible.builtin.shell: lspci | grep Pensando
    - ansible.builtin.shell: dmesg | grep ionic
    - ansible.builtin.shell: ls -l  /sys/class/net/*/device
    - ansible.builtin.shell: ls -l  /sys/class/net/*/device/driver
    - ansible.builtin.shell: ethtool -i enp25s0np0
    - ansible.builtin.shell: devlink dev info pci/0000:19:00.0

    # TODO: update FW for Pensando DSC

- name: Marvell CN106 installation-update
  hosts: dh3
  become: yes
  tasks:
    - ansible.builtin.shell: lspci | grep Cavium
    - ansible.builtin.shell: lsusb | grep CP2105
    - ansible.builtin.shell: ls -l  /dev/ttyUSB*

    # TODO: update FW for Marvell CN106

- name: Secure Zero Touch Provisioning
  hosts: DPUs
  become: yes
  tasks:
    # TODO: enable this
    - name: Nvidia | Fix dhcp client config and then run sztp agent container
      when: inventory_hostname == 'bf123'
      block:
        - ansible.builtin.lineinfile: backup=true path=/etc/dhcp/dhclient.conf insertbefore='^option(.*)code(.*)$' line='option sztp-redirect-urls code 143  = text;'
        - ansible.builtin.lineinfile: backup=true path=/etc/dhcp/dhclient.conf regexp='^(request .*)' line='\g<1> sztp-redirect-urls,'
        - name: Nvidia | Run sztp agent container on Nvidia BF
          community.docker.docker_container:
            name: sztp
            image: ghcr.io/opiproject/opi-sztp-client:main
            state: started
            restart: true
            detach: true
            network_mode: host
            restart_policy: always
            mounts:
              - type: bind
                source: /var/lib/NetworkManager/dhclient-aa93b667-6aac-3804-91e9-4958e07fdb2f-oob_net0.lease
                target: /var/lib/dhclient/dhclient.leases
                read_only: true
            command: /opi-sztp-agent daemon --bootstrap-trust-anchor-cert /mnt/opi.pem --device-end-entity-cert /mnt/opi_cert.pem --device-private-key /mnt/opi_private_key.pem
