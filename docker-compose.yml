# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022-2023 Dell Inc, or its subsidiaries.
---
version: "3.7"

services:

  telegraf:
    restart: unless-stopped
    image: docker.io/library/telegraf:1.31
    volumes:
      - /:/hostfs:ro
      - ./telegraf.d:/etc/telegraf/telegraf.d:ro
    network_mode: host
    environment:
      HOST_MOUNT_PREFIX: /hostfs
      HOST_PROC: /hostfs/proc

  otel-gw-collector:
    restart: unless-stopped
    image: docker.io/otel/opentelemetry-collector:0.92.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./grafana/otel-collector-config.yaml:/etc/otel-collector-config.yaml:z
    ports:
      - "1888:1888"    # pprof extension
      - "8888:8888"    # Prometheus metrics exposed by the collector
      - "8889:8889"    # Prometheus exporter metrics
      - "13133:13133"  # health_check extension
      - "4317:4317"    # OTLP gRPC receiver
      - "55679:55679"  # zpages extension
    networks:
      - opi
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:13133/ping || exit 1

  prometheus:
    restart: unless-stopped
    image: docker.io/prom/prometheus:v2.48.1
    volumes:
      - ./grafana/prometheus.yaml:/etc/prometheus/prometheus.yml:z
    ports:
      - "9091:9090"
    networks:
      - opi
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090 || exit 1
      interval: 6s
      timeout: 10s
      retries: 5

  grafana:
    restart: unless-stopped
    image: docker.io/grafana/grafana:10.2.3
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./grafana/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./grafana/grafana-dashboard-servers.json:/var/lib/grafana/dashboards/servers.json
      - ./grafana/grafana-dashboard-switches.json:/var/lib/grafana/dashboards/switches.json
    ports:
      - "3000:3000"
    networks:
      - opi
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1
      interval: 6s
      timeout: 10s
      retries: 3

  mysql:
    restart: unless-stopped
    image: mysql:8.0
    hostname: mysql
    networks:
      - opi
    volumes:
      - semaphore-mysql:/var/lib/mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_DATABASE: semaphore
      MYSQL_USER: semaphore
      MYSQL_PASSWORD: semaphore

  semaphore:
    restart: unless-stopped
    networks:
      - opi
    ports:
      - 4000:3000
    image: semaphoreui/semaphore:v2.9.75
    environment:
      SEMAPHORE_DB_USER: semaphore
      SEMAPHORE_DB_PASS: semaphore
      SEMAPHORE_DB_HOST: mysql # for postgres, change to: postgres
      SEMAPHORE_DB_PORT: 3306 # change to 5432 for postgres
      SEMAPHORE_DB_DIALECT: mysql # for postgres, change to: postgres
      SEMAPHORE_DB: semaphore
      SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/
      SEMAPHORE_ADMIN_PASSWORD: changeme
      SEMAPHORE_ADMIN_NAME: admin
      SEMAPHORE_ADMIN_EMAIL: admin@localhost
      SEMAPHORE_ADMIN: admin
      SEMAPHORE_ACCESS_KEY_ENCRYPTION: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
      TZ: UTC
    depends_on:
      - mysql

  portainer:
    restart: unless-stopped
    image: portainer/portainer-ce:2.0.0
    command: -H unix:///var/run/docker.sock
    networks:
      - opi
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  bootstrap:
    image: docker.io/opiproject/sztpd:0.0.15
    environment:
      SZTPD_INIT_PORT: 6080
      SZTPD_NBI_PORT: 7080
      SZTPD_SBI_PORT: 8080
      SZTPD_INIT_MODE: 1
      SZTPD_ACCEPT_CONTRACT: "Yes"
      SZTPD_INIT_ADDR: 0.0.0.0
    ports:
      - 6080:6080
      - 7080:7080
      - 8080:8080
    networks:
      - opi
    healthcheck:
      test: ["CMD-SHELL", "curl --fail -H Accept:application/yang-data+json http://127.0.0.1:$$SZTPD_INIT_PORT/.well-known/host-meta || exit 1"]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  web:
    image: docker.io/library/httpd:2.4.57-alpine3.17
    volumes:
      - ./sztp/images:/usr/local/apache2/htdocs
      - ./sztp/generated-server/my_cert.pem:/usr/local/apache2/conf/server.crt
      - ./sztp/generated-server/private_key.pem:/usr/local/apache2/conf/server.key
      - ./sztp/generated-server/ta_cert_chain.pem:/usr/local/apache2/conf/ssl.crt/ca-bundle.crt
    ports:
      - 443:443
    networks:
      - opi
    entrypoint: /bin/ash
    command: |
        -x -e -c '
        sed -i \
        -e "s/^#\(Include .*httpd-ssl.conf\)/\1/" \
        -e "s/^#\(LoadModule .*mod_ssl.so\)/\1/" \
        -e "s/^#\(LoadModule .*mod_socache_shmcb.so\)/\1/" \
        conf/httpd.conf
        sed -i \
        -e "s/^#\(SSLVerifyClient .*require\)/\1/" \
        -e "s/^#\(SSLVerifyDepth .*\)/\1/" \
        -e "s/^#\(SSLCACertificateFile .*\)/\1/" \
        conf/extra/httpd-ssl.conf
        httpd-foreground
        '

  jaeger:
    image: jaegertracing/all-in-one:1.53.0
    ports:
      - "16686:16686"
      - "14317:4317"
      - "14318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - opi
    healthcheck:
      test: ["CMD-SHELL", "nc -zv localhost 4317 && nc -zv localhost 4318 || exit 1"]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

volumes:
  semaphore-mysql:
  portainer_data:

networks:
  opi:
